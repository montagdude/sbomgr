#!/bin/bash

#  sbomgr is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.

#  sbomgr is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.

#  You should have received a copy of the GNU General Public License
#  along with sbomgr.  If not, see <http://www.gnu.org/licenses/>.

#  Copyright (C) 2016 Daniel Prosser

#
# Load configuration
#
CONF=${CONF:-/etc/sbomgr/sbomgr.conf}
. $CONF

#
# sbomgr version
#
VERSION=0.4.0

################################################################################
# Removes quotes around string
function remove_quotes ()
{
  local STRING=$1
  STRING=${STRING#\"}
  STRING=${STRING%\"}
  echo $STRING
}

################################################################################
# Gets SlackBuild name from installed package name in /var/log/packages
function get_installed_name ()
{
  local PKG=$1

  # Get rid of trailing stuff
  local BUILD=${PKG%*_$TAG}
  BUILD=${BUILD%*-*}  # Architecture-number
  BUILD=${BUILD%*-*}  # Architecture
  BUILD=${BUILD%*-*}  # Version
  echo $BUILD
}

################################################################################
# Gets SlackBuild version from installed package name in /var/log/packages
function get_installed_version ()
{
  local PKG=$1

  # Get rid of trailing stuff
  local VERSION=${PKG%*_$TAG}
  VERSION=${VERSION%*-*}  # Architecture-number
  VERSION=${VERSION%*-*}  # Architecture

  # Get rid of leading package name
  local TEMP=${VERSION%*-*}
  VERSION=${VERSION#$TEMP-*}
  echo $VERSION
}

################################################################################
# Gets SlackBuild version from VERSION string in *.info file
function get_current_version ()
{
  local BUILD=$1

  # Make sure we are at the top of the git tree
  cd $CDIR

  # Get path of SlackBuild.info
  local INFILE=$(find . -maxdepth 3 -mindepth 3 -name "$BUILD".info)

  # Get version number from SlackBuild.info
  local VERSION=$(grep VERSION "$INFILE" | sed 's/VERSION=//')
  VERSION=$(remove_quotes "$VERSION")

  echo $VERSION
}

################################################################################
# Checks if Ponce's git repo is being used
function check_ponce_repo ()
{
  if [ "$REPO" == "git://github.com/Ponce/slackbuilds.git" ]; then
    echo true
  else
    echo false
  fi
}

################################################################################
# Returns the git branch name that is currently being used
function get_git_branch ()
{
  # Go to top-level git tree
  cd $CDIR
 
  # Parse git status string
  local STAT=$(git status | head -1)
  local BRANCH=$(echo "$STAT" | cut -d' ' -f3)
  echo $BRANCH
}

################################################################################
# Switches to specified git branch
function checkout_git_branch ()
{
  local GITBRANCH="$1"

  # Go to top-level git tree
  cd $CDIR

  # Get branch currently being used
  local CURRBRANCH=$(get_git_branch)

  # Checkout new branch if needed
  if [ "$CURRBRANCH" != "$GITBRANCH" ]; then
    git checkout $GITBRANCH
  fi
}

################################################################################
# Syncs git repo with local copy
function update ()
{
  # Check if Ponce's git repo is being used
  local PONCEREPO=$(check_ponce_repo)
  local BASEDIR=$(basename $CDIR)
  
  # Create local git directory if needed
  if [ ! -d "$CDIR" ]; then
    mkdir $CDIR
    cd $CDIR/../
    rm -rf $BASEDIR
    git clone $REPO $BASEDIR
    if ! $PONCEREPO; then
      cd $BASEDIR
      checkout_git_branch $BRANCH
    fi

  # Master branch can just use git pull, but Ponce's must be re-downloaded
  # http://www.linuxquestions.org/questions/slackware-14/what-is-the-correct-url-and-command-to-git-clone-slackbuilds-current-4175578557/#post5537842
  else
    if ! $PONCEREPO; then
      cd $CDIR
      checkout_git_branch $BRANCH
      git pull
    else
      cd $CDIR/../
      rm -rf $BASEDIR
      git clone $REPO $BASEDIR 
    fi
  fi
}

################################################################################
# Checks if a SlackBuild is actually installed. Returns package name if so.
function check_installed ()
{
  local BUILD=$1
  local PKGLIST=$(find /var/log/packages -maxdepth 1 -name "$BUILD*_$TAG")
  local INSTALLED=false
  local PKG BUILDNAME

  # There can be multiple packages fitting the pattern, so loop through them
  # and check against requested
  if [ -n "$PKGLIST" ]; then
    for PKG in $PKGLIST
    do
      PKG=$(basename "$PKG")
      BUILDNAME=$(get_installed_name "$PKG")
      if [ "$BUILDNAME" == "$BUILD" ]; then
        INSTALLED=true
        break
      fi
    done
  fi

  if $INSTALLED; then
    echo $PKG
  else
    echo "Not installed"
  fi
}

################################################################################
# Gets y/n choice
function user_choice ()
{
  local __MSG=$1
  local __CHOICE=$2
  local TEMPCHOICE

  local VALIDCHOICE=false
  while ! $VALIDCHOICE
  do
    echo -ne "$__MSG (y/n): "
    read TEMPCHOICE
    if [[ "$TEMPCHOICE" == "y" || "$TEMPCHOICE" == "Y" ]]; then
      TEMPCHOICE="y"
      VALIDCHOICE=true
    elif [[ "$TEMPCHOICE" == "n" || "$TEMPCHOICE" == "N" ]]; then
      TEMPCHOICE="n"
      VALIDCHOICE=true
    else
     echo "Please enter y or n."
    fi
  done

  # This trick is needed to echo to stdout. See usage in remove_slackbuild.
  eval $__CHOICE="'$TEMPCHOICE'"
}

################################################################################
# Gets list of SlackBuilds specified on the command line
function get_buildlist
{
  local ARG BUILDLIST
  BUILDLIST=""

  for ARG in $@
  do
    if [ "${ARG:0:1}" == "-" ]; then
      continue
    elif [ "${ARG%=*}" == "sources" ]; then
      continue
    else
      BUILDLIST="$BUILDLIST $ARG"
    fi
  done

  echo $BUILDLIST
}

################################################################################
# Parses command-line options for install
function parse_install_opts ()
{
  local ARG
  for ARG in $@
  do
    if [ "${ARG:0:1}" == "-" ]; then
      case $ARG in
      "--force" | "-f")
          FORCE=1
          ;;
      "--no-deps" | "-n")
          NODEPS=1
          ;;
      *)
          echo "Unrecognized install option $ARG."
          exit 1
          ;;
      esac
    elif [ "${ARG%=*}" == "sources" ]; then
      SOURCEOPT=1
      SOURCEDIR=${ARG#*=}
    fi
  done
}

################################################################################
# Extracts URLs of source files to download
function sources_from_info ()
{
  local INFILE=$1
  if [ $# -eq 2 ]; then
    local FORCE32=$2
  else
    local FORCE32="noforce-32-bit"
  fi
  local FORCE32=$2
  local ARCH=$(uname -m)
  local SOURCES

  # Read variables from .info file
  . $INFILE

  # First try to use DOWNLOAD_x86_64 link for 64-bit
  if [ "$ARCH" == "x86_64" ]; then
    SOURCES=$DOWNLOAD_x86_64
  fi

  # Use regular DOWNLOAD= line for x86 architecture, if there's no 64-bit source
  # download, or if forcing 32-bit
  if [[ "$ARCH" != "x86_64" || -z "$SOURCES" || "$FORCE32" == "force-32-bit" ]]; then
    SOURCES=$DOWNLOAD
  fi

  echo $SOURCES
}

################################################################################
# Extracts MD5sums of source files to download
function md5sums_from_info ()
{
  local INFILE=$1
  if [ $# -eq 2 ]; then
    local FORCE32=$2
  else
    local FORCE32="noforce-32-bit"
  fi
  local ARCH=$(uname -m)
  local SOURCES MD5SUMS

  # Read variables from .info file
  . $INFILE

  # First try to use MD5SUM_x86_64 link for 64-bit
  if [ "$ARCH" == "x86_64" ]; then
    SOURCES=$DOWNLOAD_x86_64
    MD5SUMS=$MD5SUM_x86_64
  fi

  # Use regular MD5SUM= line for x86 architecture, if there's no 64-bit source
  # download, or if forcing 32-bit
  if [[ "$ARCH" != "x86_64" || -z "$SOURCES" || "$FORCE32" == "force-32-bit" ]]; then
    MD5SUMS=$MD5SUM
  fi

  echo $MD5SUMS
}

################################################################################
# Removes source files
function remove_sources ()
{
  local SOURCES="$@"
  local SOURCE
  for SOURCE in $SOURCES
  do
    SOURCE=$(basename "$SOURCE")
    if [ -f "$SOURCE" ]; then
      rm $SOURCE
    fi
  done
}

################################################################################
# Installs or reinstalls SlackBuild
function install_slackbuild ()
{
  local BUILD=$1
  local MSG CHOICE MD5ARRAY ITEM CHKDNLD MD5CHK

  # Get SlackBuild path
  cd $CDIR
  local BUILDPATH=$(find . -maxdepth 2 -mindepth 2 -name "$BUILD")
  if [ -z "$BUILDPATH" ]; then
    echo "Error: there is no SlackBuild named $BUILD."
    exit 1
  fi

  # Check if SlackBuild is installed on system and get package name
  local INSTALLEDPKG=$(check_installed "$BUILD")

  # Offer removal or reinstallation if it is already installed
  if [ "$INSTALLEDPKG" != "Not installed" ]; then
    local INSTALLEDVERSION=$(get_installed_version "$INSTALLEDPKG")
    local CURRENTVERSION=$(get_current_version "$BUILD")

    # Current version already installed - ask for reinstallation
    if [ "$INSTALLEDVERSION" == "$CURRENTVERSION" ]; then
      MSG="$BUILD is already at the most recent version. Reinstall?"

    # Installed version out of date - ask for reinstallation
    else
      MSG="$BUILD is already installed but out of date. Reinstall?"
    fi

    # Return if user chooses to
    if [ $FORCE -eq 0 ]; then
      user_choice "$MSG" CHOICE
      if [ "$CHOICE" != "y" ]; then
        return
      fi
    fi
  fi

  # Go to SlackBuild directory
  cd $BUILDPATH

  # Get PKGTYPE (I think it is always or almost always TGZ, but anyway...)
  local PKGTYPE=$(grep "PKGTYPE" $BUILD.SlackBuild | sed 's/.*PKGTYPE:-//' | sed 's/}*$//')

  # Remove any package in /tmp with $BUILD in the name (could mess up
  # installation later)
  local PKG=$(find /tmp -maxdepth 1 -name "$BUILD*.$PKGTYPE")
  if [ -n "$PKG" ]; then
    rm $PKG
  fi

  # Determine source download strings
  local SOURCES=$(sources_from_info "$BUILD".info)

  # Some SlackBuilds have an UNSUPPORTED string if it's not supported on
  # 64-bit
  local FORCE32="no-force-32-bit"
  local ARCH=$(uname -m)
  if [[ "$ARCH" == "x86_64" && "$SOURCES" == "UNSUPPORTED" ]]; then
    MSG="$BUILD is unsupported on x86_64, but it may work with mutlilib.\nTry installing 32-bit version?"
    user_choice "$MSG" CHOICE
    if [ "$CHOICE" == "y" ]; then
      FORCE32="force-32-bit"
      SOURCES=$(sources_from_info "$BUILD".info $FORCE32)
    else
      exit 1
    fi
  fi

  # Get MD5sums for source downloads and put them into an array
  local MD5SUMS=$(md5sums_from_info "$BUILD".info $FORCE32)
  local COUNT=0
  for ITEM in $MD5SUMS
  do
    MD5ARRAY["$COUNT"]=$ITEM
    let "COUNT+=1"
  done

  # Remove any existing source files
  remove_sources "$SOURCES"

  # Download and check MD5SUMs
  local SOURCERR=0
  local MD5ERR=0
  COUNT=0
  for SOURCE in $SOURCES
  do
    # Copy sources from specified directory
    if [ $SOURCEOPT -eq 1 ]; then
      SOURCE=$(basename "$SOURCE")
      if [ -z "$(find "$SOURCEDIR" -maxdepth 1 -name "$SOURCE")" ]; then
        echo "Error: source file $SOURCE not present in $SOURCEDIR."
        exit 1
      else
        if [ "$(readlink -f $SOURCEDIR)" != "$CDIR" ]; then
          cp $SOURCEDIR/$SOURCE .
        fi
      fi

    # Download and check for error ($? is the return value)
    else
      CHKDNLD=$(wget "$SOURCE")
      if [ $? != 0 ]; then         
        echo "There was an error downloading the source file."
        SOURCERR=1
      fi
    fi

    # Check MD5sum
    SOURCE=$(basename "$SOURCE")
    MD5CHK=$(md5sum "$SOURCE")
    MD5CHK=$(echo $MD5CHK | cut -d' ' -f1)
    if [ "$MD5CHK" != "${MD5ARRAY[$COUNT]}" ]; then
      echo "Error: md5sum check failed on $SOURCE."
      MD5ERR=1
    fi
 
    let "COUNT+=1"
  done

  # Exit if something went wrong
  if [[ $SOURCERR -eq 1 || $MD5ERR -eq 1 ]]; then
    if [ $SOURCERR -eq 1 ]; then
      echo "One or more sources failed to download."
    fi
    if [ $MD5ERR -eq 1 ]; then
      echo "One or more sources failed the md5sum check."
    fi

    # Remove source code
    if [[ $SOURCEOPT -eq 0 || "$(readlink -f $SOURCEDIR)" != "$CDIR" ]]; then
      remove_sources $SOURCES
      exit 1
    fi
  fi

  # Execute install script
  local PERM=$(stat -c '%a %n' $BUILD.SlackBuild)
  chmod +x $BUILD.SlackBuild
  ./$BUILD.SlackBuild

  # Exit if not successful
  PKG=$(find /tmp -maxdepth 1 -name "$BUILD*.$PKGTYPE")
  if [ -z "$PKG" ]; then
    echo "Error: build failed."

    # Remove source code
    if [[ $SOURCEOPT -eq 0 || "$(readlink -f $SOURCEDIR)" != "$CDIR" ]]; then
      remove_sources $SOURCES
  
      # Restore permissions of SlackBuild script and exit
      chmod $PERM $BUILD.SlackBuild
      exit 1
    fi
  fi

  # Install compiled package
  upgradepkg --reinstall --install-new $PKG

  # Remove temporary files and source code
  rm $PKG
  if [[ $SOURCEOPT -eq 0 || "$(readlink -f $SOURCEDIR)" != "$CDIR" ]]; then
    remove_sources $SOURCES
  fi

  # Restore original permissions of SlackBuild script
  chmod $PERM $BUILD.SlackBuild

  # Notify of any special Slackware instructions
  if [[ -f 'README.SLACKWARE' || -f 'README.Slackware' ]]; then
    echo "Note: Slackware notes found. You should read them with 'sbomgr info $BUILD.'"
  fi
}

################################################################################
# Installs, reinstalls, or upgrades one or more SlackBuilds
function install_multiple ()
{
  local BUILD REQ MSG CHOICE

  for BUILD in $@
  do
    # Get list of dependencies
    if [ $NODEPS -eq 0 ]; then
      echo "Searching for dependencies of $BUILD ..."
      REQLIST=""
      get_recursive_reqlist $BUILD

      # Ask for confirmation
      if [ -n "$REQLIST" ]; then
        echo "The following SlackBuilds will be installed:"
        for REQ in $REQLIST
        do
          echo $REQ
        done
        echo $BUILD
        if [ $FORCE -eq 0 ]; then
          MSG="Proceed with installation?"
          user_choice "$MSG" CHOICE
          if [ "$CHOICE" == "n" ]; then
            echo
            continue
          fi 
        fi
      fi

      # Install dependencies
      for REQ in $REQLIST
      do
        install_slackbuild $REQ
      done
    fi

    # Install requested SlackBuild
    install_slackbuild $BUILD
  done
}

################################################################################
# Parses command-line options for remove
function parse_remove_opts ()
{
  local ARG
  for ARG in $@
  do
    if [ "${ARG:0:1}" == "-" ]; then
      case $ARG in
      "--force" | "-f")
          FORCE=1
          ;;
      *)
          echo "Unrecognized remove option $ARG."
          exit 1
          ;;
      esac
    fi
  done
}

################################################################################
# Removes a SlackBuild
function remove_slackbuild ()
{
  local BUILD=$1
  local INSTALLEDPKG=$(check_installed "$BUILD")
  local CHOICE MSG

  # Return if package is not installed
  if [ "$INSTALLEDPKG" == "Not installed" ]; then
    echo "There is no installed SlackBuild called $BUILD."

  # Otherwise remove the package
  else
    CHOICE=""
    MSG=""
    
    # Ask for confirmation before removing
    if [ $FORCE -eq 0 ]; then
      MSG="Remove $BUILD?"
      user_choice "$MSG" CHOICE
      if [ "$CHOICE" == "y" ]; then
        removepkg $INSTALLEDPKG
      fi 
    else
      removepkg $INSTALLEDPKG
    fi
  fi
}

################################################################################
# Removes multiple SlackBuilds
function remove_multiple ()
{
  local BUILD

  for BUILD in $@
  do
    remove_slackbuild $BUILD
  done
}

################################################################################
# Gets list of upgradable SlackBuilds
function get_upgradelist ()
{
  local PKG BUILD INSTALLEDVERSION CURRENTVERSION LEN

  # Get list of installed SlackBuilds
  local PKGLIST=$(find /var/log/packages -maxdepth 1 -name "*_$TAG" | sort)

  # Loop through installed packages and check for upgrades
  local UPGRADELIST=""
  local UPGRADECOUNT=0
  for PKG in $PKGLIST
  do
    PKG=$(basename "$PKG")

    # Get SlackBuild name and version
    BUILD=$(get_installed_name "$PKG")
    INSTALLEDVERSION=$(get_installed_version "$PKG")

    # Get current version
    CURRENTVERSION=$(get_current_version "$BUILD")
    LEN=${#CURRENTVERSION}

    # Compare versions and tally up-to-date and out-of-date
    # Some SlackBuilds append to version number during install (e.g. kernel
    #   modules), so ignore that part when comparing.
    if [ "${INSTALLEDVERSION:0:$LEN}" != "$CURRENTVERSION" ]; then
      UPGRADELIST="$UPGRADELIST $BUILD"
      let "UPGRADECOUNT+=1"
    fi
  done

  if [ $UPGRADECOUNT -gt 0 ]; then
    echo $UPGRADELIST
  fi
}

################################################################################
# Checks all installed SlackBuilds for upgrades
function list_upgrades ()
{
 local PKG BUILD INSTALLEDVERSION CURRENTVERSION
 local INSTALLEDVERSIONLIST CURRENTVERSIONLIST LEN

 # Get list of upgradable SlackBuilds
 local UPGRADELIST=$(get_upgradelist)
 local UPGRADECOUNT=0

 # Record current and installed version
 if [ -n "$UPGRADELIST" ]; then
   for BUILD in $UPGRADELIST
   do
     PKG=$(find /var/log/packages -maxdepth 1 -name "$BUILD*")
     INSTALLEDVERSION=$(get_installed_version $(basename "$PKG"))
     CURRENTVERSION=$(get_current_version "$BUILD")
     LEN=${#CURRENTVERSION}
     INSTALLEDVERSIONLIST["$UPGRADECOUNT"]="$INSTALLEDVERSION"
     CURRENTVERSIONLIST["$UPGRADECOUNT"]="$CURRENTVERSION"
     let "UPGRADECOUNT+=1"
   done

   # Print a summary
   echo ""
   if [ $UPGRADECOUNT -eq 1 ]; then
     echo "$UPGRADECOUNT SlackBuild can be upgraded."
   else
     echo "$UPGRADECOUNT SlackBuilds can be upgraded."
   fi
   echo "-----------------------------------------------------------------------"
   local I=0
   while [ $I -lt $UPGRADECOUNT ];
   do
     echo "Name: ${UPGRADELIST[$I]}"
     echo "Installed version: ${INSTALLEDVERSIONLIST[$I]}"
     echo "Current version: ${CURRENTVERSIONLIST[$I]}"
     echo ""
     let "I+=1"
   done
 else
   echo "All SlackBuilds are up-to-date."
 fi
}

################################################################################
# Upgrades all SlackBuilds that are out of date
function upgrade_all ()
{
  local MSG CHOICE BUILD

  # Get list of upgradable SlackBuilds and prompt
  local UPGRADELIST=$(get_upgradelist)
  if [ -n "$UPGRADELIST" ]; then
    if [ $FORCE -eq 0 ]; then
      echo "The following SlackBuilds will be upgraded:"
      for BUILD in $UPGRADELIST
      do
        echo $BUILD
      done
      MSG="Proceed with upgrade?"
      user_choice "$MSG" CHOICE
      if [ "$CHOICE" == "n" ]; then
        echo
        exit 0
      fi 
    fi

    # Upgrade SlackBuilds
    install_multiple $UPGRADELIST
  fi
}

################################################################################
# Lists recursive dependencies of specified SlackBuild
function get_recursive_reqlist ()
{
  local BUILD=$1
  local DEP REQARR I

  # Get the directory for the requested SlackBuild
  local BUILDPATH=$(find "$CDIR" -maxdepth 2 -mindepth 2 -name "$BUILD")
  if [ -z "$BUILDPATH" ]; then
    echo "There is no SlackBuild named $BUILD."
    return
  fi

  # Build list of requirements by scanning .info files
  . "$BUILDPATH"/"$BUILD".info
  if [ -n "$REQUIRES" ]; then
    for DEP in $REQUIRES
    do
      if [ "$DEP" == "%README%" ]; then
        echo "Note: see README for optional dependencies of $BUILD"
      else
        REQLIST=$(echo "$REQLIST" | sed "s@$DEP @@")  # Remove earlier duplicate
        REQLIST="$REQLIST $DEP"
        get_recursive_reqlist $DEP
      fi
    done
  fi

  # Reverse order so that lower dependencies are listed first
  REQARR=($REQLIST)
  REQLIST=""
  for ((I = ${#REQARR[@]} - 1; I >= 0; I--))
  do
    REQLIST="$REQLIST ${REQARR[I]}"
  done
}

################################################################################
# Prints list of requirements and installation status
function print_reqlist ()
{
  local REQ STATUS

  for REQ in $REQLIST
  do
    if [ "$(check_installed $REQ)" != "Not installed" ]; then
      STATUS="installed"
    else
      STATUS="not installed"
    fi
    echo "$REQ [$STATUS]"
  done
}

################################################################################
# Lists installed SlackBuilds that require specified SlackBuild
function list_inv_reqs ()
{
  local BUILD=$1
  local PKG NAME BUILDPATH INVREQLIST REQ

  # Loop through list of installed packages
  local PKGLIST=$(find /var/log/packages -maxdepth 1 -name "*_$TAG")
  local INVREQCOUNT=0
  for PKG in $PKGLIST
  do
    # Go to top of git tree
    cd $CDIR

    # Go to directory of requested SlackBuild
    PKG=$(basename "$PKG")
    NAME=$(get_installed_name "$PKG")
    BUILDPATH=$(find . -maxdepth 2 -mindepth 2 -name "$NAME")
    cd $BUILDPATH

    # Read requirements from *.info file
    . "$NAME".info
    
    # Loop through and see if specified SlackBuild is mentioned
    if [ -n "$REQUIRES" ]; then
      for REQ in $REQUIRES
      do
        if [ "$REQ" == "$BUILD" ]; then
          INVREQLIST["$INVREQCOUNT"]="$NAME"
          let "INVREQCOUNT+=1"
          break
        fi
      done
    fi
  done

  # List SlackBuilds that require specified SlackBuild
  if [ $INVREQCOUNT -eq 0 ]; then
    echo "No installed SlackBuilds require $BUILD."
  else
    echo "The following SlackBuilds require $BUILD:"
    local I=0
    while [ $I -lt $INVREQCOUNT ]
    do
      echo "${INVREQLIST[$I]}"
      let "I+=1"
    done
  fi
}

################################################################################
# Shows info from README and README.SLACKWARE
function show_info ()
{
  local BUILD=$1

  # Go to the top of the git tree
  cd $CDIR

  # Get the directory for the requested SlackBuild
  echo "Searching for $BUILD ..."
  local BUILDPATH=$(find . -maxdepth 2 -mindepth 2 -name "$BUILD")
  if [ -z "$BUILDPATH" ]; then
    echo "There is no SlackBuild named $BUILD."
    return
  fi

  # Go the the SlackBuild directory
  cd $BUILDPATH
  BUILDPATH=${BUILDPATH#./*}
  local NAME=${BUILDPATH#*/*}

  # Get current version
  local VERSION=$(get_current_version "$NAME")
  echo "In local git repository:"
  echo "$NAME-$VERSION"
  echo ""
  echo "-----------------------------Description-----------------------------"
  cat 'README'
  if [ -f 'README.Slackware' ]; then
    echo ""
    echo "---------------------------Slackware notes---------------------------"
    cat 'README.Slackware'
  elif [ -f 'README.SLACKWARE' ]; then
    echo ""
    echo "---------------------------Slackware notes---------------------------"
    cat 'README.SLACKWARE'
  fi
}

################################################################################
# Searches for SlackBuilds with given pattern
function search ()
{
  local PATTERN=$1
  local BUILD STATUS

  # Go to the top of the git tree
  cd $CDIR

  echo "Searching for $PATTERN ..."
  local BUILDS=$(find . -maxdepth 2 -mindepth 2 -type d | grep -i "$PATTERN")

  if [ -z "$BUILDS" ]; then
    echo "There is no SlackBuild matching the pattern $PATTERN."
  else
    # Get GROUP/NAME/STATUS
    for BUILD in $BUILDS
    do
      BUILD=${BUILD#./*}
      local GROUP=${BUILD%/*}
      local NAME=${BUILD#*/*}
      if [ "$(check_installed $NAME)" != "Not installed" ]; then
        STATUS="installed"
      else
        STATUS="not installed"
      fi
      echo "$GROUP/$NAME  [$STATUS]"
    done
  fi
}

################################################################################
# Searches README files for given pattern
function search_descriptions ()
{
  local BUILD

  # Make sure spaces in the search string are resolved
  local PATTERN="$*"

  # Go to the top of the git tree
  cd $CDIR

  echo "Searching README files for $PATTERN ..."
  local PTRNFILES=$(find . -maxdepth 3 -mindepth 3 -name README | xargs grep -il "$PATTERN" | sort -t "/" -k 3)

  # Display list of SlackBuilds
  if [ -n "$PTRNFILES" ]; then
    echo "The following SlackBuilds have $PATTERN in the README file:"
    for BUILD in $PTRNFILES
    do
      BUILD=${BUILD#./*/*}  # Remove leading ./ and group
      BUILD=${BUILD%*/*}    # Remove trailing /README
      echo $BUILD
    done
  else
    echo "No SlackBuilds have $PATTERN in the README file."
  fi
}      

################################################################################
# Lists installed SlackBuilds and versions
function list_installed ()
{
  local PKGLIST=$(find /var/log/packages -maxdepth 1 -name "$BUILD*_$TAG" | sort)
  local PKG

  # List number of installed packages
  set -- $PKGLIST
  echo ""
  echo "There are $# installed packages."
  if [ $# -eq 0 ]; then
    return
  fi

  # Loop through installed packages and list name-version
  echo "-----------------------------------------------------------------------"
  for PKG in $PKGLIST
  do
    echo $(basename "$PKG")
  done
  echo ""
}

################################################################################
# Lists installed SlackBuilds that are not required by any other installed
# SlackBuild
function list_orphans ()
{
  local PKGLIST=$(find /var/log/packages -maxdepth 1 -name "*_$TAG" | sort)
  local CHECKPKG CHECKNAME PKG NAME BUILDPATH REQ ORPHANS ORPHAN

  echo ""
  echo "Searching ..."

  # Could use list_inv_reqs, but it will keep searching for all SlackBuilds that
  # require a given other SlackBuild, thus wasting time. Will duplicate the
  # functionality here instead.
  local ISREQ=0
  ORPHANS=""
  for CHECKPKG in $PKGLIST
  do
    CHECKPKG=$(basename "$CHECKPKG")
    CHECKNAME=$(get_installed_name "$CHECKPKG")
    ISREQ=0
    for PKG in $PKGLIST
    do
      # Go to top of git tree
      cd $CDIR

      # Go to directory of requested SlackBuild
      PKG=$(basename "$PKG")
      NAME=$(get_installed_name "$PKG")
      BUILDPATH=$(find . -maxdepth 2 -mindepth 2 -name "$NAME")
      cd $BUILDPATH

      # Read requirements from *.info file
      . "$NAME".info

      # Loop through and see if specified SlackBuild is mentioned
      if [ -n "$REQUIRES" ]; then
        for REQ in $REQUIRES
        do
          if [ "$REQ" == "$CHECKNAME" ]; then
            let "ISREQ+=1"
            break
          fi
        done 
      fi
      if [ $ISREQ -gt 0 ]; then
        break
      fi
    done

    # Store SlackBuild in orphan list if no package requires it
    if [ $ISREQ -eq 0 ]; then
      ORPHANS="$ORPHANS $CHECKPKG"
    fi
  done

  set -- $ORPHANS
  if [ $# -eq 0 ]; then
    echo "No orphans found."
    return
  else
    echo "The following are not required by any installed SlackBuilds:"
  fi

  # Loop through orphans and list name-version
  echo "-----------------------------------------------------------------------"
  for ORPHAN in $ORPHANS
  do
    echo "$ORPHAN"
  done
  echo ""
}

################################################################################
# Lists groups in git tree
function list_groups ()
{
  local GROUP

  # Go to top-level git tree
  cd $CDIR

  # Print list of groups
  local GROUPLIST=$(find . -maxdepth 1 -type d | sort)
  for GROUP in $GROUPLIST
  do
    if [[ "$GROUP" != "." && "$GROUP" != "./.git" ]]; then
      echo ${GROUP#./*}
    fi
  done
}

################################################################################
# Browses SlackBuilds in requested group
function browse_group ()
{
  local GROUP=$1
  local PKG

  # Go to top-level git tree
  cd $CDIR

  # Check if group exists
  if [ ! -d $GROUP ]; then
    echo "No group called $GROUP."
    return
  fi

  # List packages in GROUP
  cd $GROUP
  local PKGLIST=$(find . -maxdepth 1 -type d | sort)
  for PKG in $PKGLIST
  do
    if [ "$PKG" != "." ]; then
      echo ${PKG#./*}
    fi
  done
}  

################################################################################
# Prints sbomgr version
function print_version ()
{
  echo "sbomgr version $VERSION"
}

################################################################################
# Provides info on program usage
function print_usage ()
{
  echo ""
  if [ $# -eq 1 ]; then
    echo "Error: $1"
  fi
  echo "Usage: sbomgr COMMAND [OPTIONS] [SLACKBUILDS]"
  echo
  echo "COMMANDS:"
  echo
  echo "update"
  echo "  Syncs git repo with local repo. This command should be run on first"
  echo "  use and periodically afterwards. Be sure to set the correct git"
  echo "  branch for your Slackware version in /etc/sbomgr/sbomgr.conf."
  echo
  echo "install"
  echo "  Installs, reinstalls, or upgrades SlackBuilds listed on the command"
  echo "  line after the install command. By default, 'sbomgr install' resolves"
  echo "  dependencies by scanning the .info files in the repository and"
  echo "  installs them before the requested SlackBuilds. Options:"
  echo "  --force, -f: for SlackBuilds that are already installed, upgrades or"
  echo "               reinstalls them without asking for confirmation."
  echo "  --no-deps, -n: installs only the listed SlackBuilds without resolving"
  echo "                 dependencies."
  echo "  sources=DIRECTORY: looks for source files in the specified directory"
  echo "                     instead of downloading them from the internet."
  echo
  echo "remove"
  echo "  Removes the SlackBuilds listed on the command line after the remove"
  echo "  command. Options:"
  echo "  --force, -f: removes without asking for confirmation first."
  echo
  echo "list-upgrades"
  echo "  Checks all installed SlackBuilds for upgrades and prints a summary."
  echo
  echo "upgrade-all"
  echo "  Upgrades all installed SlackBuilds that are out of date. Options are"
  echo "  the same as those for 'sbomgr install':"
  echo "  --force, -f: upgrades or reinstalls SlackBuilds without asking for"
  echo "               confirmation."
  echo "  --no-deps, -n: installs only the SlackBuilds that are out of date"
  echo "                 without resolving dependencies."
  echo "  sources=DIRECTORY: looks for source files in the specified directory"
  echo "                     instead of downloading them from the internet."
  echo
  echo "requires"
  echo "  For the SlackBuild listed on the command line after the requires"
  echo "  command, resolves and displays dependencies and shows installation"
  echo "  status."
  echo
  echo "requirement-of"
  echo "  Displays installed SlackBuilds that depend on the SlackBuild listed"
  echo "  on the command line after the requirement-of command."
  echo
  echo "search"
  echo "  Searches for SlackBuilds in the repository whose name includes the"
  echo "  pattern listed on the command line after the search command."
  echo
  echo "search-descriptions"
  echo "  Searches README files in the repository for the pattern listed on the"
  echo "  command line after the search-descriptions command."
  echo
  echo "info"
  echo "  Displays the contents of the README* files for the SlackBuild listed"
  echo "  on the command line after the info command."
  echo
  echo "list-installed"
  echo "  Lists installed SlackBuilds and versions."
  echo
  echo "list-orphans"
  echo "  Displays installed SlackBuilds that are not required by any other"
  echo "  installed SlackBuild. Note that this list may include SlackBuilds"
  echo "  that were explicitly installed by the user."
  echo
  echo "list-groups"
  echo "  Displays groups in the repository."
  echo
  echo "browse-group"
  echo "  Displays SlackBuilds in the group specified on the command line after"
  echo "  the browse-group command."
  echo
  echo "--version, v"
  echo "  Prints sbomgr version."
  echo
  echo "--help, h"
  echo "  Shows this usage information."
  echo 
}

################################################################################
# Main program

# Defaults for CLOs
FORCE=0
NODEPS=0
SOURCEOPT=0
SOURCEDIR=""

# Not enough command line arguments
if [ $# -lt 1 ]; then
  print_usage "must specify a command."

# update
elif [ "$1" == "update" ]; then
  update 

# install
elif [ "$1" == "install" ]; then
  if [ $# -eq 1 ]; then
    print_usage "must specify SlackBuild with install option."
  else
    parse_install_opts ${@:2:$#}
    install_multiple $(get_buildlist ${@:2:$#})
  fi

# remove
elif [ "$1" == "remove" ]; then
  if [ $# -eq 1 ]; then
    print_usage "must specify SlackBuild with remove option."
  else
    parse_remove_opts ${@:2:$#}
    remove_multiple $(get_buildlist ${@:2:$#})
  fi 

# list-upgrades
elif [ "$1" == "list-upgrades" ]; then
  list_upgrades

# upgrade-all
elif [ "$1" == "upgrade-all" ]; then
  if [ $# -gt 1 ]; then
    parse_install_opts ${@:2:$#}
  fi
  upgrade_all

# requires
elif [ "$1" == "requires" ]; then
  if [ $# -lt 2 ]; then
    print_usage "must specify a SlackBuild with requires option."
  else
    REQLIST=""
    get_recursive_reqlist $2
    print_reqlist
  fi

# requirement-of
elif [ "$1" == "requirement-of" ]; then
  if [ $# -lt 2 ]; then
    print_usage "must specify a SlackBuild with requirement-of option."
  else
    list_inv_reqs $2
  fi

# search
elif [ "$1" == "search" ]; then
  if [ $# -lt 2 ]; then
    print_usage "must specify PATTERN with search option."
  else
    search $2
  fi

# search-descriptions
elif [ "$1" == "search-descriptions" ]; then
  if [ $# -lt 2 ]; then
    print_usage "must specify PATTERN with search-descriptions option."
  else
    search_descriptions $2
  fi

# info
elif [ "$1" == "info" ]; then
  if [ $# -lt 2 ]; then
    print_usage "must specify a SlackBuild with info option."
  else
    show_info $2
  fi

# list-installed
elif [ "$1" == "list-installed" ]; then
  list_installed

# list-orphans
elif [ "$1" == "list-orphans" ]; then
  list_orphans

# list-groups
elif [ "$1" == "list-groups" ]; then
  list_groups

# browse-group
elif [ "$1" == "browse-group" ]; then
  if [ $# -lt 2 ]; then
    print_usage "must specify a SlackBuild with browse-group option."
  else
    browse_group $2
  fi

# --version
elif [[ "$1" == "--version" || "$1" == "-v" ]]; then
  print_version

# --help
elif [[ "$1" == "--help" || "$1" == "-h" ]]; then
  print_usage

# Unrecognized option
else
  print_usage "unrecognized option."
fi
